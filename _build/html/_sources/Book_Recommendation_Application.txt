*******************************
Book Recommendation Application
*******************************

Background
==========

The application that will be used for this tutorial is a web-based book recommendation system that provides a list of books available on
`Project Gutenberg <http://www.gutenberg.org/>`_
and provides recommendations of other books that might interest you.
You can run the application at
`http://www.impactsoftwarelabs.com/book <http://www.impactsoftwarelabs.com/book>`_
and view the full source code here.


A use case diagram showing the major functions is listed below.

.. image:: /images/UseCaseOverview.jpg

Current-State Implementation
============================

A diagram of the current state implementation is shown below.

.. image:: /images/CurrentStateImplementation.jpg

The primary components are:

*   PHP is used to dynamically generate Web pages that are served by an Apache Web Server.


*   A MySQL database is used to store the book catalog, user ratings, and recommendations.


*   An open-source recommendation engine named
    `MyMediaLite <http://www.mymedialite.net/>`_
    is used to process each user's book ratings and generate recommendations.


*   Small Java programs are used to interact with the recommendation engine, and to download and process the book catalog.



The book catalog contains approximately 50,000 books and the number of users is relatively small.

Future-State Implementation
===========================

The existing system will be re-engineered to use a
`broker pattern <http://www.wikipedia.org/wiki/Broker_Pattern>`_
where the various components are decoupled and potentially distributed.
A diagram of the future-state implementation is shown below.

.. image:: /images/FutureStateImplementation.jpg

The primary changes are:

*   Creation of a
    *Book Service*
    that will interact with the web pages using a RESTful API.
    This service will be managed and executed using CloudI
    and will be created using the Erlang programming language.

*   Use of a CloudI
    *MySQL Service Adapter*
    to provide location transparency for the MySQL database backend.

*   HTML pages will call the 
    *Book Service*
    directly using AJAX rather than being generated by PHP on the server side.

*   Modify the various Java utility programs to use the *Book Service* via the ZeroMQ message bus.


Architectural Decisions
=======================

Data Transmission
-----------------

Because the components will be developed using different languages (PHP, Java, and Erlang), an important decision is to select a language-independent method for transmitting data between each component.
CloudI does not impose a specific data transfer mechanism, so you are free to select this.
In this tutorial, the
`JSON protocol <http://www.wikipedia.org/wiki/Json>`_
will be used with the following libraries:


*   PHP -
    TBD

*   Java -
    TBD

*   Erlang -
    `Jiffy <https://github.com/davisp/jiffy>`_


Service API
-----------

Another important point is to design a consistent RESTful API for interacting with your services.
CloudI uses the Cowboy HTTP Server to handle requests and Cowboy supports the standard range of REST methods including:
GET, HEAD, POST, PUT, PATCH, DELETE, and OPTIONS.
Additional information about Cowboy is available
`here <http://ninenines.eu/docs/en/cowboy/HEAD/>`_
.
An excellent resource for designing RESTful API's is located `here <https://restful-api-design.readthedocs.org/en/latest/intro.html>`_

The table below lists the different use cases, HTTP methods, and URL examples implemented by the Book Service. Note that the top-level URL will be **/book**


========================  ====== ============================== =========================================================
Use Case                  Method URL                            Description
========================  ====== ============================== =========================================================
Browse New Books          GET    /book/newbooks                 Return list of new books
Browse Popular Books      GET    /book/popularbooks             Return list of most-popular books
Browse Recommended Books  GET    /book/recommendedbooks/user=?  Return list of recommended books for the given User ID
View Book Details         GET    /book/allbooks/id=?            Return details about book given the Item ID 
Download Book             GET    /book/download/id=?&user=?	Download a book given the Item ID and User ID
Rank Downloaded Book      POST   /book/download/                Update a book's rating given the User ID, Item ID, Rating
Add Book to Collection    POST   /book/allbooks/		Add a book to the collection   
========================  ====== ============================== =========================================================

.. note::
 As described later in this tutorial, access control lists are developed using URL patterns.  Consequently, give some thought to developing a consistent URL structure.  


Integration Method
------------------

There are several different methods for applications to call CloudI services. The alternatives depend on whether the application is "external" (i.e., not part of CloudI) or "internal" (i.e., a CloudI service). 


================= ================== =====================================================================================
Application Type  Integration Method Comments                                                                             
================= ================== =====================================================================================
External          HTTP               Using REST API                                                                        
External          Zero MQ            Use Zero MQ as a messaging bus. See Cloudi FAQ for details                                   
Internal          CloudI API         Setup Subscribe/Request pairs.  Messages can be synchronous, asynchrous, or broadcast 
================= ================== =====================================================================================

Additional information is available in the CloudI FAQ
`here <http://cloudi.org/faq.html#4_API>`_
.

.. note::
 Technically an Internal application could also use the HTTP or ZeroMQ integration methods, but generally the use of the CloudI API is preferred.
 
For the Book Recommendation application, HTTP REST calls will be used to integrate the HTML pages with the *Book Service*. The Java Utility programs will use the ZeroMQ message bus.

